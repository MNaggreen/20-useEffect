import { useEffect } from 'react'
import { useState } from 'react'
import './App.css'
/* front end отправляет запрос на сервер и получает черезек какое то время запрос на изменение состояния */
function App() {
  const [todo, setTodo] =
    useState(
      null
    ) /* создаем хук c изначальным значением null который с помощью setTodo будет передавать значение из функции */

  useEffect(() => {
    console.log(
      'useEffect rendered'
    ) /* теперь данная функция вызывается один раз */
    /* используем чтобы прервать бесконечный ререндеринг */
    fetch(
      'https://jsonplaceholder.typicode.com/todos/1'
    ) /* функция фозвращает промис и мы с помощью неё отправляем запрос на бакэнд сервер */
      .then((response) =>
        response.json()
      ) /*  если сервер вернул успешно данные, вызывается данный юлок кода ему передается обьект который можно конвертировать и далее ниже вывести */
      .then(
        (json) =>
          setTodo(
            json
          ) /* передаем значение в функцию setTodo которая изменит todo, если сервер вернул успешно данные */
      ) /* далее мы получаем обьект сконвертированный или даэе массив и выводим его в консоль */
  }, []) /* это массиов зависимостей если он пустой он выполняет значение функции useEffect однократно приначальном запуске useEffect */
  /* если мы добавим зависимость в скобки то рендеринг будет опять бесконечным т.к. реакт выполняет ререндеринг каждый раз когда переменная изменяется */
  console.log(
    'App rendered'
  ) /* консоль покажет что app делает бусконечный ререндеринг элементов */
  console.log(todo)

  return (
    <div className="App">
      {todo && <h1>{todo.title}</h1>}
      {/* если todo не равно null это значит true и также в h1 появится текст это тоже будет true и все выведется  */}
      {/* обращение кэлементу объекта через точечную запись */}
    </div>
  )
}

export default App
